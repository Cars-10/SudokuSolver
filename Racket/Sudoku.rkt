;#lang racket
#lang typed/racket/no-check
(require racket/function)
(require math/array)

(define puzzle (mutable-array 
#[#[0 0 0 0 0 0 0 0 0] #[0 0 0 0 0 0 0 0 0] #[0 0 0 0 0 0 0 0 0] 
#[0 0 0 0 0 0 0 0 0] #[0 0 0 0 0 0 0 0 0] #[0 0 0 0 0 0 0 0 0] #[0 0 0 0 0 0 0 0 0] 
#[0 0 0 0 0 0 0 0 0] #[0 0 0 0 0 0 0 0 0]]))

(define DEBUG 0)
(define count 0)
(define args (current-command-line-arguments))

(define (matrixValue j i)
    (array-ref puzzle (list->vector (list j i)))
)

(define (printMatrix)
    (displayln "\nPuzzle:")
    (for ([j 9])
        (for ([i 9])
            (display (string-append (~r (matrixValue j i)) " "))
        )
        (displayln "")
    )
)

(define (readMatrixFile filename)
     (when (file-exists? filename) 
        (define j 0)
        (with-input-from-file filename
            (thunk 
                (for ([line (in-lines)])
                    (define i 0)
                    (unless (string-prefix? line "#")
                        (for-each (lambda (arg) 
                            ;(displayln (string-append "j,i,arg: " (~r j) "," (~r i) "," (~a arg)))
                            (array-set! puzzle (list->vector (list j i)) (string->number arg))
                            (set! i (+ i 1))
                            )
                            (string-split line)
                        )
                        (set! j (+ j 1))
                    )
                )
            )
        )
    )
)

(define (isPossible y x val)
    (let/ec return
    (when (= DEBUG 3) (displayln (string-append "isPossible " (~r y) " " (~r x) " " (~r val))))
    (for ([i 9])
        (when (= (matrixValue y i) val) (return 0))
        (when (= (matrixValue i x) val) (return 0))
    )
    
    (define x0 (* (floor (/ x 3)) 3))
    (define y0 (* (floor (/ y 3)) 3))
    (for ([i 3])
        (for ([j 3])
           (when (= (matrixValue(+ y0 j) (+ x0 i)) val) (return 0))
        )
    )
    (when (= DEBUG 3) (displayln "YES Possible"))
    (return 1)
    )
)

(define (solve)
    (let/ec return
    (for ([j 9])
        (for ([i 9])
            (when (= (matrixValue j i) 0)
                (for ([val (in-range 1 10)])
                    (set! count (+ count 1))
                    (when (= DEBUG 3) (displayln (string-append "Count= " (~r count))))
                    (when (= (isPossible j i val) 1)
                        (define ix (list->vector (list j i)))
                        (array-set! puzzle ix val)
                        (when (= (solve) 2) (return 2))
                        (array-set! puzzle ix 0)  
                    )
                )
                (return 0)
            )
        )
    )
    (printMatrix)
    (displayln (string-append "\nSolved in Iterations=" (~r count) "\n"))
    (return 2)
    )
)

(for ([i (vector-length args)])
    (define file (vector-ref args i))
    (displayln file)
    (when (string-suffix? file ".matrix") 
         (readMatrixFile file)
         (printMatrix)
         (set! count 0)
         (solve)
    )
)